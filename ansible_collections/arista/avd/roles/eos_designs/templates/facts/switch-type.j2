{% if type is arista.avd.defined(fail_action='error', var_name='type') and 
      switch_keys is arista.avd.defined(fail_action='error', var_name='switch_keys') %}
{%     set ns = namespace() %}
{%     for switch_key in switch_keys %}
{%         if switch_keys[switch_key].type is arista.avd.defined(type) %}
{%             set ns.switch_key_data = switch_keys[switch_key] %}
{%             set ns.switch_key = switch_key %}
{%             break %}
{%         endif %}
{%     endfor %}
{%     if ns.switch_key_data.type is arista.avd.defined(type, fail_action='error', var_name='switch_keys.<key>.type') %}
{# switch.type #}
  type: {{ ns.switch_key_data.type }}
{%     endif %}

{# switch.switch_key #}
  switch_key: {{ ns.switch_key }}

{# switch.connected_endpoints #}
  connected_endpoints: {{ ns.switch_key_data.connected_endpoints | arista.avd.default(false) }}

{# switch.default_evpn_role #}
  default_evpn_role: {{ ns.switch_key_data.default_evpn_role | arista.avd.default('none') }}

{# switch.mlag_support #}
  mlag_support: {{ ns.switch_key_data.mlag_support | arista.avd.default(false) }}

{# switch.network_services_l2 #}
  network_services_l2: {{ ns.switch_key_data.network_services.l2 | arista.avd.default(false) }}

{# switch.network_services_l3 #}
  network_services_l3: {{ ns.switch_key_data.network_services.l3 | arista.avd.default(false) }}

{# switch.underlay_router #}
  underlay_router: {{ ns.switch_key_data.underlay_router | arista.avd.default(true)}}

{# switch.uplink_type #}
  uplink_type: {{ ns.switch_key_data.uplink_type | arista.avd.default('p2p') }}

{# switch.vtep #}
  vtep: {{ ns.switch_key_data.vtep | arista.avd.default(false) }}

{# switch.ip_addressing #}
  ip_addressing: {{ templates[design.type].ip_addressing | combine(ns.switch_key_data.ip_addressing | arista.avd.default({})) }}

{% endif %}